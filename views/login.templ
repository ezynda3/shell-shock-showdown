package views

import (
	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase"
)

templ Login(configs []core.OAuth2ProviderConfig) {
	if app, ok := ctx.Value("app").(*pocketbase.PocketBase); ok {
		@Layout(false, app.Settings().Meta.AppURL) {
		<div class="flex min-h-[80vh]">
			<!-- Gradient Side -->
			<div class="hidden lg:block w-1/2 bg-gradient-to-br from-violet-500 to-purple-800 p-12">
				<div class="flex h-full items-center justify-center">
					<div class="text-center text-white">
						<h1 class="text-4xl font-bold">Welcome Back</h1>
						<p class="mt-4 text-lg text-violet-200">Sign in to your account to continue your journey</p>
					</div>
				</div>
			</div>
			<!-- Form Side -->
			<div class="w-full lg:w-1/2 flex items-center justify-center p-8">
				<div class="w-full max-w-md">
					<div class="text-center mb-8">
						<h2 class="text-2xl font-bold leading-9 tracking-tight">
							Sign in to your account
						</h2>
					</div>
					<div class="uk-card">
						<div class="uk-card-body">
							<div class="mt-6">
								<div class="relative">
									<div class="absolute inset-0 flex items-center">
										<div class="w-full border-t border-border"></div>
									</div>
									<div class="relative flex justify-center text-sm font-medium leading-6">
										<span class="bg-background px-6 text-muted-foreground">Sign-in with</span>
									</div>
								</div>
								<div class="mt-6 grid grid-cols-2 gap-4" id="oauth-providers">
									<!-- Provider buttons will be populated here -->
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		@templ.JSONScript("appUrl", app.Settings().Meta.AppURL)
		<script type="module">
			import PocketBase from 'https://cdnjs.cloudflare.com/ajax/libs/pocketbase/0.25.0/pocketbase.es.mjs';
			
			// Initialize PocketBase with the app URL from server-side
			const appUrl = document.getElementById('appUrl').textContent.trim().replace(/['"]/g, '');
			const pb = new PocketBase(appUrl);
			
			// Function to handle OAuth2 authentication
			async function handleOAuth2Auth(provider) {
				try {
					// This will open a popup with the OAuth2 provider's login page
					// When authentication is complete, the popup will close automatically
					const authData = await pb.collection('users').authWithOAuth2({
						provider: provider,
					});
					
					console.log('User authenticated:', authData);
					
					// Redirect to home page after successful authentication
					window.location.href = '/';
				} catch (error) {
					console.error('Authentication failed:', error);
				}
			}
			
			// Get available OAuth2 providers
			async function loadProviders() {
				try {
					const authMethods = await pb.collection('users').listAuthMethods();
					const providers = authMethods.oauth2?.providers || [];
					const container = document.getElementById('oauth-providers');
					
					// Clear existing content
					container.innerHTML = '';
					
					// Create a button for each provider
					providers.forEach(provider => {
						const button = document.createElement('button');
						button.className = 'uk-btn uk-btn-default w-full capitalize';
						button.onclick = () => handleOAuth2Auth(provider.name);
						
						const icon = document.createElement('uk-icon');
						icon.className = 'mr-2';
						icon.setAttribute('icon', provider.name.toLowerCase());
						
						button.appendChild(icon);
						button.appendChild(document.createTextNode(provider.name));
						
						container.appendChild(button);
					});
					
					if (providers.length === 0) {
						container.innerHTML = '<p class="text-center w-full">No OAuth2 providers available.</p>';
					}
				} catch (error) {
					console.error('Failed to load auth methods:', error);
				}
			}
			
			// Load providers when the page loads
			document.addEventListener('DOMContentLoaded', loadProviders);
		</script>
		}
	}
}