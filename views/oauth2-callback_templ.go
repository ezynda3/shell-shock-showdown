// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/pocketbase/pocketbase/core"

func OAuth2Callback(app core.App) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html class=\"dark uk-theme-violet\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title>OAuth2 Authentication</title><link rel=\"stylesheet\" href=\"https://unpkg.com/franken-ui@internal/dist/css/core.min.css\"><link rel=\"stylesheet\" href=\"https://unpkg.com/franken-ui@internal/dist/css/utilities.min.css\"><script type=\"module\" src=\"https://unpkg.com/franken-ui@internal/dist/js/core.iife.js\"></script></head><body class=\"bg-background text-foreground min-h-screen\"><div class=\"uk-container uk-container-xs py-32\"><div class=\"uk-card\"><div class=\"uk-card-header\"><h3 class=\"uk-card-title\">Authentication in Progress</h3></div><div class=\"uk-card-body\"><div class=\"uk-placeholder\"><div class=\"uk-text-center\"><div class=\"uk-spinner\" role=\"status\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"currentColor\" cx=\"12\" cy=\"12\" r=\"10\"></circle></svg></div><pre id=\"content\" class=\"uk-margin-small-top uk-text-small\">Authenticating...</pre></div></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("appUrl", app.Settings().Meta.AppURL).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script type=\"module\">\n        import PocketBase from \"https://cdn.jsdelivr.net/gh/pocketbase/js-sdk@master/dist/pocketbase.es.mjs\"\n        const appUrl = document.getElementById('appUrl').textContent.trim().replace(/['\"]/g, '')\n        \n        // Create custom auth store that doesn't use localStorage\n        class CustomAuthStore {\n            constructor() {\n                this.token = '';\n                this.model = null;\n            }\n            get isValid() {\n                return !!this.token;\n            }\n            save(token, model) {\n                this.token = token;\n                this.model = model;\n            }\n            clear() {\n                this.token = '';\n                this.model = null;\n            }\n        }\n\n        const pb = new PocketBase(appUrl);\n        // Override the default auth store\n        pb.authStore = new CustomAuthStore();\n        \n        const redirectURL = `${appUrl}/oauth2-callback`;\n        const contentEl   = document.getElementById(\"content\");\n\n        // parse the query parameters from the redirected url\n        const params = (new URL(window.location)).searchParams;\n\n        // get provider info from cookie\n        const providerCookie = document.cookie\n            .split('; ')\n            .find(row => row.startsWith('provider='))\n        if (!providerCookie) {\n            contentEl.innerText = \"Provider cookie not found.\";\n            window.location.href = \"/login\";\n        }\n\n        // decode the cookie value and parse the provider info\n        const provider = JSON.parse(decodeURIComponent(providerCookie.split('=')[1]));\n\n        // compare the redirect's state param and the stored provider's one\n        if (provider.state !== params.get(\"state\")) {\n            contentEl.innerText = \"State parameters don't match.\";\n        } else {\n            // authenticate\n            pb.collection(\"users\").authWithOAuth2Code(\n                provider.name,\n                params.get(\"code\"),\n                provider.codeVerifier,\n                redirectURL,\n                // pass any optional user create data\n                {\n                    emailVisibility: false,\n                }\n            ).then((authData) => {\n                if (authData?.token) {\n                    // Authentication successful, redirect to home page\n                    window.location.href = \"/\";\n                } else {\n                    contentEl.innerText = \"Authentication failed - no token received\";\n                }\n            }).catch((err) => {\n                contentEl.innerText = \"Failed to exchange code.\\n\" + err;\n            });\n        }\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
